{
  "address": "0x3545192b340F50d77403DC0A64cf2b32F03d00A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "_nftPrice",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "_maxNFT",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxMint",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nftPrice",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxNFT",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxMint",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NFTInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "RoyaltyFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNFT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_fee",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7e274472d12bb04c2afc7c086220e43fc2ddd316fb1e7140f1272977c993e9a",
  "receipt": {
    "to": null,
    "from": "0x4D40eb12430A57965cEe3015348d490C6156dF20",
    "contractAddress": "0x3545192b340F50d77403DC0A64cf2b32F03d00A9",
    "transactionIndex": 47,
    "gasUsed": "2095986",
    "logsBloom": "0x
    "blockHash": "0xe0a2bbe44427b6686682f2be8e9e883da21da59f6c9bd16bb0bb51ff517ebe86",
    "transactionHash": "0xa7e274472d12bb04c2afc7c086220e43fc2ddd316fb1e7140f1272977c993e9a",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 14838106,
        "transactionHash": "0xa7e274472d12bb04c2afc7c086220e43fc2ddd316fb1e7140f1272977c993e9a",
        "address": "0x3545192b340F50d77403DC0A64cf2b32F03d00A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004d40eb12430a57965cee3015348d490c6156df20"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0xe0a2bbe44427b6686682f2be8e9e883da21da59f6c9bd16bb0bb51ff517ebe86"
      },
      {
        "transactionIndex": 47,
        "blockNumber": 14838106,
        "transactionHash": "0xa7e274472d12bb04c2afc7c086220e43fc2ddd316fb1e7140f1272977c993e9a",
        "address": "0x3545192b340F50d77403DC0A64cf2b32F03d00A9",
        "topics": [
          "0x18bfe8b393413297d3c2ed65bf49ce07aeae5ff77f1be859f7a6b2cb928927ce"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000628d55600000000000000000000000000000000000000000000000000000000062b3e5400000000000000000000000004d40eb12430a57965cee3015348d490c6156df20000000000000000000000000000000000000000000000000000000000000000e506f6f6c79202d204c61777965720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006504f4f4c59320000000000000000000000000000000000000000000000000000",
        "logIndex": 118,
        "blockHash": "0xe0a2bbe44427b6686682f2be8e9e883da21da59f6c9bd16bb0bb51ff517ebe86"
      }
    ],
    "blockNumber": 14838106,
    "cumulativeGasUsed": "7215390",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pooly - Lawyer",
    "POOLY2",
    "1000000000000000000",
    1000,
    20,
    1653429600,
    1655956800,
    "0x4D40eb12430A57965cEe3015348d490C6156dF20"
  ],
  "numDeployments": 1,
  "solcInputHash": "aa87d22ef96d0cd34a48956ef6bac8fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_nftPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_maxNFT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxMint\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nftPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxNFT\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxMint\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"RoyaltyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_fee\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NFTInitialized(string,string,uint128,uint32,uint32,uint32,uint32,address)\":{\"params\":{\"endTimestamp\":\"Timestamp at which the NFT sale ends\",\"maxMint\":\"Max number of NFTs that can be minted in a single transaction\",\"maxNFT\":\"Max number of NFTs available in this collection\",\"name\":\"Name of the NFT collection\",\"nftPrice\":\"NFT price in ETH\",\"owner\":\"Address of the contract owner\",\"startTimestamp\":\"Timestamp at which the NFT sale starts\",\"symbol\":\"Symbol of the NFT collection\"}},\"NFTMinted(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of ETH received\",\"numberOfTokens\":\"Number of NFTs minted\",\"to\":\"Address who received the minted NFTs\"}},\"RoyaltyFeeSet(address,address,uint96)\":{\"params\":{\"fee\":\"Fee expressed in basis points\",\"owner\":\"Address of the caller. Owner of this contract.\",\"recipient\":\"Address to whom the royalty fee will be paid\"}},\"Withdrawn(address,uint256)\":{\"params\":{\"amount\":\"Amount of ETH withdrawn\",\"owner\":\"Address of the caller and recipient. Owner of this contract.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"constructor\":{\"params\":{\"_endTimestamp\":\"Timestamp at which the NFT sale will end\",\"_maxMint\":\"Max number of NFTs that can be minted in a single transaction\",\"_maxNFT\":\"Max number of NFTs available in this collection\",\"_name\":\"NFT collection name\",\"_nftPrice\":\"NFT price in ETH\",\"_owner\":\"Owner of this contract\",\"_startTimestamp\":\"Timestamp at which the NFT sale will start\",\"_symbol\":\"NFT collection symbol\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintNFT(uint256)\":{\"params\":{\"_numberOfTokens\":\"Number of NFTs to mint\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"This function is only callable by the owner of the contract.\",\"params\":{\"baseURI_\":\"NFT tokens base URI\"}},\"setRoyaltyFee(address,uint96)\":{\"details\":\"Fees are expressed in basis points. For example: 1000 = 10%\",\"params\":{\"_fee\":\"Percentage of the secondary sales that will be paid to the `_recipient`\",\"_recipient\":\"Address to whom the royalty fee will be paid\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}},\"withdraw(uint256)\":{\"details\":\"This function is only callable by the owner of the contract.\",\"params\":{\"_amount\":\"Amount of ETH to withdraw\"}}},\"title\":\"PoolTogether Inc. Pooly NFT\",\"version\":1},\"userdoc\":{\"events\":{\"NFTInitialized(string,string,uint128,uint32,uint32,uint32,uint32,address)\":{\"notice\":\"Emitted when the NFT is initialized.\"},\"NFTMinted(address,uint256,uint256)\":{\"notice\":\"Emitted when one or more NFTs are minted.\"},\"RoyaltyFeeSet(address,address,uint96)\":{\"notice\":\"Emitted when royalty fee has been set.\"},\"Withdrawn(address,uint256)\":{\"notice\":\"Emitted when ETH are withdrawn from the contract.\"}},\"kind\":\"user\",\"methods\":{\"baseURI()\":{\"notice\":\"NFT tokens base URI\"},\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"Initializes the NFT contract\"},\"endTimestamp()\":{\"notice\":\"Timestamp at which the NFTs will be unavailable for minting\"},\"maxMint()\":{\"notice\":\"Max number of NFTs that can be minted in a single transaction\"},\"maxNFT()\":{\"notice\":\"Max number of NFTs available in this collection\"},\"mintNFT(uint256)\":{\"notice\":\"Mints a new number of NFTs.\"},\"nftPrice()\":{\"notice\":\"NFT price in ETH\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"setBaseURI(string)\":{\"notice\":\"Set NFT tokens base URI\"},\"setRoyaltyFee(address,uint96)\":{\"notice\":\"Sets the royalty fee that all ids in this contract will default to.\"},\"startTimestamp()\":{\"notice\":\"Timestamp at which the NFTs will be available for minting\"},\"totalSupply()\":{\"notice\":\"Total supply of NFTs\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw ETH from the contract.\"}},\"notice\":\"NFT to help PoolTogether Inc. raise funds that will be used to cover cost of the legal fees.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolyNFT.sol\":\"PoolyNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7cdc887a364b6e3f9669bb4b16582e135121437399ac69d41db15012e09b96cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xefc3d1b4250b3d598cb6bf7886b4466d8025f24e94ac9047b7074dfad3edba10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"contracts/PoolyNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.13;\\n\\nimport { ERC721, ERC721Royalty } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport { Ownable } from \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\n/**\\n * @title PoolTogether Inc. Pooly NFT\\n * @notice NFT to help PoolTogether Inc. raise funds that will be used to cover cost of the legal fees.\\n */\\ncontract PoolyNFT is ERC721Royalty, Ownable {\\n  /**\\n   * @notice Emitted when the NFT is initialized.\\n   * @param name Name of the NFT collection\\n   * @param symbol Symbol of the NFT collection\\n   * @param nftPrice NFT price in ETH\\n   * @param maxNFT Max number of NFTs available in this collection\\n   * @param maxMint Max number of NFTs that can be minted in a single transaction\\n   * @param startTimestamp Timestamp at which the NFT sale starts\\n   * @param endTimestamp Timestamp at which the NFT sale ends\\n   * @param owner Address of the contract owner\\n   */\\n  event NFTInitialized(\\n    string name,\\n    string symbol,\\n    uint128 nftPrice,\\n    uint32 maxNFT,\\n    uint32 maxMint,\\n    uint32 startTimestamp,\\n    uint32 endTimestamp,\\n    address owner\\n  );\\n\\n  /**\\n   * @notice Emitted when one or more NFTs are minted.\\n   * @param to Address who received the minted NFTs\\n   * @param numberOfTokens Number of NFTs minted\\n   * @param amount Amount of ETH received\\n   */\\n  event NFTMinted(address indexed to, uint256 numberOfTokens, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when royalty fee has been set.\\n   * @param owner Address of the caller. Owner of this contract.\\n   * @param recipient Address to whom the royalty fee will be paid\\n   * @param fee Fee expressed in basis points\\n   */\\n  event RoyaltyFeeSet(address indexed owner, address indexed recipient, uint96 fee);\\n\\n  /**\\n   * @notice Emitted when ETH are withdrawn from the contract.\\n   * @param owner Address of the caller and recipient. Owner of this contract.\\n   * @param amount Amount of ETH withdrawn\\n   */\\n  event Withdrawn(address indexed owner, uint256 amount);\\n\\n  /* ============ Variables ============ */\\n\\n  /// @notice NFT price in ETH\\n  uint128 public immutable nftPrice;\\n\\n  /// @notice Max number of NFTs available in this collection\\n  uint32 public immutable maxNFT;\\n\\n  /// @notice Max number of NFTs that can be minted in a single transaction\\n  uint32 public immutable maxMint;\\n\\n  /// @notice Timestamp at which the NFTs will be available for minting\\n  uint32 public immutable startTimestamp;\\n\\n  /// @notice Timestamp at which the NFTs will be unavailable for minting\\n  uint32 public immutable endTimestamp;\\n\\n  /// @notice Total supply of NFTs\\n  uint256 public totalSupply;\\n\\n  /// @notice NFT tokens base URI\\n  string public baseURI;\\n\\n  /* ============ Constructor ============ */\\n\\n  /**\\n   * @notice Initializes the NFT contract\\n   * @param _name NFT collection name\\n   * @param _symbol NFT collection symbol\\n   * @param _nftPrice NFT price in ETH\\n   * @param _maxNFT Max number of NFTs available in this collection\\n   * @param _maxMint Max number of NFTs that can be minted in a single transaction\\n   * @param _startTimestamp Timestamp at which the NFT sale will start\\n   * @param _endTimestamp Timestamp at which the NFT sale will end\\n   * @param _owner Owner of this contract\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint128 _nftPrice,\\n    uint32 _maxNFT,\\n    uint32 _maxMint,\\n    uint32 _startTimestamp,\\n    uint32 _endTimestamp,\\n    address _owner\\n  ) ERC721(_name, _symbol) Ownable(_owner) {\\n    require(_owner != address(0), \\\"PTNFT/owner-not-zero-address\\\");\\n    require(_nftPrice > 0, \\\"PTNFT/price-gt-zero\\\");\\n    require(_maxNFT > 0, \\\"PTNFT/max-nft-gt-zero\\\");\\n    require(_maxMint > 0, \\\"PTNFT/max-mint-gt-zero\\\");\\n    require(_startTimestamp > block.timestamp, \\\"PTNFT/startTimestamp-gt-block\\\");\\n    require(_endTimestamp > _startTimestamp, \\\"PTNFT/endTimestamp-gt-start\\\");\\n\\n    nftPrice = _nftPrice;\\n    maxNFT = _maxNFT;\\n    maxMint = _maxMint;\\n    startTimestamp = _startTimestamp;\\n    endTimestamp = _endTimestamp;\\n\\n    emit NFTInitialized(\\n      _name,\\n      _symbol,\\n      _nftPrice,\\n      _maxNFT,\\n      _maxMint,\\n      _startTimestamp,\\n      _endTimestamp,\\n      _owner\\n    );\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n   * @notice Mints a new number of NFTs.\\n   * @param _numberOfTokens Number of NFTs to mint\\n   */\\n  function mintNFT(uint256 _numberOfTokens) external payable {\\n    uint256 _currentTimestamp = block.timestamp;\\n\\n    require(\\n      _currentTimestamp >= startTimestamp && _currentTimestamp < endTimestamp,\\n      \\\"PTNFT/sale-inactive\\\"\\n    );\\n\\n    uint256 _totalSupply = totalSupply;\\n\\n    require(_totalSupply + _numberOfTokens <= maxNFT, \\\"PTNFT/nfts-sold-out\\\");\\n    require(_numberOfTokens <= maxMint, \\\"PTNFT/exceeds-max-mint\\\");\\n\\n    uint256 _amount = _numberOfTokens * nftPrice;\\n    require(_amount == msg.value, \\\"PTNFT/insufficient-funds\\\");\\n\\n    for (uint256 index; index < _numberOfTokens; index++) {\\n      uint256 _mintIndex = _totalSupply + index;\\n\\n      if (_mintIndex < maxNFT) {\\n        _safeMint(msg.sender, _mintIndex);\\n      }\\n    }\\n\\n    totalSupply = _totalSupply + _numberOfTokens;\\n\\n    emit NFTMinted(msg.sender, _numberOfTokens, _amount);\\n  }\\n\\n  /**\\n   * @notice Set NFT tokens base URI\\n   * @dev This function is only callable by the owner of the contract.\\n   * @param baseURI_ NFT tokens base URI\\n   */\\n  function setBaseURI(string memory baseURI_) external onlyOwner {\\n    baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @notice Sets the royalty fee that all ids in this contract will default to.\\n   * @dev Fees are expressed in basis points. For example: 1000 = 10%\\n   * @param _recipient Address to whom the royalty fee will be paid\\n   * @param _fee Percentage of the secondary sales that will be paid to the `_recipient`\\n   */\\n  function setRoyaltyFee(address _recipient, uint96 _fee) external onlyOwner {\\n    _setDefaultRoyalty(_recipient, _fee);\\n\\n    emit RoyaltyFeeSet(msg.sender, _recipient, _fee);\\n  }\\n\\n  /**\\n   * @notice Withdraw ETH from the contract.\\n   * @dev This function is only callable by the owner of the contract.\\n   * @param _amount Amount of ETH to withdraw\\n   */\\n  function withdraw(uint256 _amount) external onlyOwner {\\n    require(_amount > 0, \\\"PTNFT/withdraw-amount-gt-zero\\\");\\n\\n    (bool _success, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n\\n    require(_success, \\\"PTNFT/failed-to-withdraw-eth\\\");\\n\\n    emit Withdrawn(msg.sender, _amount);\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n   * @notice Set NFT base URI.\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overridden in child contracts.\\n   * @return NFT tokens base URI\\n   */\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return baseURI;\\n  }\\n}\\n\",\"keccak256\":\"0xeeefabe311a783f3a18326b4804de71f3730eff07aa85488ee7e2a58fafbce8c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002a7638038062002a7683398101604081905262000035916200051a565b80888881600290805190602001906200005092919062000368565b5080516200006690600390602084019062000368565b5050506200007a816200031660201b60201c565b506001600160a01b038116620000d75760405162461bcd60e51b815260206004820152601c60248201527f50544e46542f6f776e65722d6e6f742d7a65726f2d616464726573730000000060448201526064015b60405180910390fd5b6000866001600160801b031611620001325760405162461bcd60e51b815260206004820152601360248201527f50544e46542f70726963652d67742d7a65726f000000000000000000000000006044820152606401620000ce565b60008563ffffffff16116200018a5760405162461bcd60e51b815260206004820152601560248201527f50544e46542f6d61782d6e66742d67742d7a65726f00000000000000000000006044820152606401620000ce565b60008463ffffffff1611620001e25760405162461bcd60e51b815260206004820152601660248201527f50544e46542f6d61782d6d696e742d67742d7a65726f000000000000000000006044820152606401620000ce565b428363ffffffff1611620002395760405162461bcd60e51b815260206004820152601d60248201527f50544e46542f737461727454696d657374616d702d67742d626c6f636b0000006044820152606401620000ce565b8263ffffffff168263ffffffff1611620002965760405162461bcd60e51b815260206004820152601b60248201527f50544e46542f656e6454696d657374616d702d67742d737461727400000000006044820152606401620000ce565b6001600160801b03861660805263ffffffff80861660a05284811660c05283811660e0528216610100526040517f18bfe8b393413297d3c2ed65bf49ce07aeae5ff77f1be859f7a6b2cb928927ce9062000300908a908a908a908a908a908a908a908a9062000631565b60405180910390a15050505050505050620006e8565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200037690620006ac565b90600052602060002090601f0160209004810192826200039a5760008555620003e5565b82601f10620003b557805160ff1916838001178555620003e5565b82800160010185558215620003e5579182015b82811115620003e5578251825591602001919060010190620003c8565b50620003f3929150620003f7565b5090565b5b80821115620003f35760008155600101620003f8565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200044157818101518382015260200162000427565b8381111562000451576000848401525b50505050565b600082601f8301126200046957600080fd5b81516001600160401b03808211156200048657620004866200040e565b604051601f8301601f19908116603f01168101908282118183101715620004b157620004b16200040e565b81604052838152866020858801011115620004cb57600080fd5b620004de84602083016020890162000424565b9695505050505050565b805163ffffffff81168114620004fd57600080fd5b919050565b80516001600160a01b0381168114620004fd57600080fd5b600080600080600080600080610100898b0312156200053857600080fd5b88516001600160401b03808211156200055057600080fd5b6200055e8c838d0162000457565b995060208b01519150808211156200057557600080fd5b50620005848b828c0162000457565b60408b015190985090506001600160801b0381168114620005a457600080fd5b9550620005b460608a01620004e8565b9450620005c460808a01620004e8565b9350620005d460a08a01620004e8565b9250620005e460c08a01620004e8565b9150620005f460e08a0162000502565b90509295985092959890939650565b600081518084526200061d81602086016020860162000424565b601f01601f19169290920160200192915050565b6000610100808352620006478184018c62000603565b905082810360208401526200065d818b62000603565b6001600160801b03999099166040840152505063ffffffff9586166060820152938516608085015291841660a084015290921660c08201526001600160a01b0390911660e09091015292915050565b600181811c90821680620006c157607f821691505b602082108103620006e257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161231f62000757600039600081816105120152610e6d0152600081816105d80152610e410152600081816104630152610f510152600081816105a401528181610ee1015261105f0152600081816102950152610fcd015261231f6000f3fe6080604052600436106101cd5760003560e01c8063715018a6116100f7578063a85adeab11610095578063e456b01c11610064578063e456b01c14610592578063e6fd48bc146105c6578063e985e9c5146105fa578063f2fde38b1461064357600080fd5b8063a85adeab14610500578063b88d4fde14610534578063c87b56dd14610554578063e30c39781461057457600080fd5b80638da5cb5b116100d15780638da5cb5b1461049a57806392642744146104b857806395d89b41146104cb578063a22cb465146104e057600080fd5b8063715018a61461041c57806372cd1fa5146104315780637501f7411461045157600080fd5b80632a55205a1161016f57806355f804b31161013e57806355f804b3146103a75780636352211e146103c75780636c0360eb146103e757806370a08231146103fc57600080fd5b80632a55205a146103135780632e1a7d4d1461035257806342842e0e146103725780634e71e0c81461039257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630d39fc811461028357806318160ddd146102cf57806323b872dd146102f357600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004611d23565b610663565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610674565b6040516101fe9190611d98565b34801561023557600080fd5b50610249610244366004611dab565b610706565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004611de0565b6107a0565b005b34801561028f57600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b0390911681526020016101fe565b3480156102db57600080fd5b506102e5600a5481565b6040519081526020016101fe565b3480156102ff57600080fd5b5061028161030e366004611e0a565b6108b5565b34801561031f57600080fd5b5061033361032e366004611e46565b6108e6565b604080516001600160a01b0390931683526020830191909152016101fe565b34801561035e57600080fd5b5061028161036d366004611dab565b610992565b34801561037e57600080fd5b5061028161038d366004611e0a565b610aec565b34801561039e57600080fd5b50610281610b07565b3480156103b357600080fd5b506102816103c2366004611ef4565b610b88565b3480156103d357600080fd5b506102496103e2366004611dab565b610bd8565b3480156103f357600080fd5b5061021c610c4f565b34801561040857600080fd5b506102e5610417366004611f3d565b610cdd565b34801561042857600080fd5b50610281610d64565b34801561043d57600080fd5b5061028161044c366004611f58565b610da9565b34801561045d57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101fe565b3480156104a657600080fd5b506008546001600160a01b0316610249565b6102816104c6366004611dab565b610e39565b3480156104d757600080fd5b5061021c6110f7565b3480156104ec57600080fd5b506102816104fb366004611f9b565b611106565b34801561050c57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b34801561054057600080fd5b5061028161054f366004611fcc565b611111565b34801561056057600080fd5b5061021c61056f366004611dab565b611149565b34801561058057600080fd5b506009546001600160a01b0316610249565b34801561059e57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b3480156105d257600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b34801561060657600080fd5b506101f2610615366004612048565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561064f57600080fd5b5061028161065e366004611f3d565b611224565b600061066e8261130b565b92915050565b6060600280546106839061207b565b80601f01602080910402602001604051908101604052809291908181526020018280546106af9061207b565b80156106fc5780601f106106d1576101008083540402835291602001916106fc565b820191906000526020600020905b8154815290600101906020018083116106df57829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166107845760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006107ab82610bd8565b9050806001600160a01b0316836001600160a01b0316036108185760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161077b565b336001600160a01b038216148061083457506108348133610615565b6108a65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161077b565b6108b0838361134b565b505050565b6108bf33826113b9565b6108db5760405162461bcd60e51b815260040161077b906120b5565b6108b08383836114b0565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161095b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061097a906001600160601b03168761211c565b6109849190612151565b915196919550909350505050565b336109a56008546001600160a01b031690565b6001600160a01b0316146109cb5760405162461bcd60e51b815260040161077b90612165565b60008111610a1b5760405162461bcd60e51b815260206004820152601d60248201527f50544e46542f77697468647261772d616d6f756e742d67742d7a65726f000000604482015260640161077b565b604051600090339083908381818185875af1925050503d8060008114610a5d576040519150601f19603f3d011682016040523d82523d6000602084013e610a62565b606091505b5050905080610ab35760405162461bcd60e51b815260206004820152601c60248201527f50544e46542f6661696c65642d746f2d77697468647261772d65746800000000604482015260640161077b565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6108b083838360405180602001604052806000815250611111565b6009546001600160a01b03163314610b615760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e657200604482015260640161077b565b600954610b76906001600160a01b031661164c565b600980546001600160a01b0319169055565b33610b9b6008546001600160a01b031690565b6001600160a01b031614610bc15760405162461bcd60e51b815260040161077b90612165565b8051610bd490600b906020840190611c71565b5050565b6000818152600460205260408120546001600160a01b03168061066e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161077b565b600b8054610c5c9061207b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c889061207b565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b505050505081565b60006001600160a01b038216610d485760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161077b565b506001600160a01b031660009081526005602052604090205490565b33610d776008546001600160a01b031690565b6001600160a01b031614610d9d5760405162461bcd60e51b815260040161077b90612165565b610da7600061164c565b565b33610dbc6008546001600160a01b031690565b6001600160a01b031614610de25760405162461bcd60e51b815260040161077b90612165565b610dec828261169e565b6040516001600160601b03821681526001600160a01b0383169033907f66bada9bf591c1c0376ab893e5fd4262ee0200d6018fb65d4d627e145536417a9060200160405180910390a35050565b4263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168110801590610e9557507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681105b610ed75760405162461bcd60e51b815260206004820152601360248201527250544e46542f73616c652d696e61637469766560681b604482015260640161077b565b600a5463ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f0b848361219c565b1115610f4f5760405162461bcd60e51b815260206004820152601360248201527214151391950bdb999d1ccb5cdbdb190b5bdd5d606a1b604482015260640161077b565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16831115610fbe5760405162461bcd60e51b815260206004820152601660248201527514151391950bd95e18d959591ccb5b585e0b5b5a5b9d60521b604482015260640161077b565b6000610ff36001600160801b037f0000000000000000000000000000000000000000000000000000000000000000168561211c565b90503481146110445760405162461bcd60e51b815260206004820152601860248201527f50544e46542f696e73756666696369656e742d66756e64730000000000000000604482015260640161077b565b60005b848110156110a857600061105b828561219c565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681101561109557611095338261179b565b50806110a0816121b4565b915050611047565b506110b3848361219c565b600a55604080518581526020810183905233917f3a8a89b59a31c39a36febecb987e0657ab7b7c73b60ebacb44dcb9886c2d5c8a910160405180910390a250505050565b6060600380546106839061207b565b610bd43383836117b5565b61111b33836113b9565b6111375760405162461bcd60e51b815260040161077b906120b5565b61114384848484611883565b50505050565b6000818152600460205260409020546060906001600160a01b03166111c85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161077b565b60006111d26118b6565b905060008151116111f2576040518060200160405280600081525061121d565b806111fc846118c5565b60405160200161120d9291906121cd565b6040516020818303038152906040525b9392505050565b336112376008546001600160a01b031690565b6001600160a01b03161461125d5760405162461bcd60e51b815260040161077b90612165565b6001600160a01b0381166112c15760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d6164604482015264647265737360d81b606482015260840161077b565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b60006001600160e01b031982166380ac58cd60e01b148061133c57506001600160e01b03198216635b5e139f60e01b145b8061066e575061066e826119c6565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061138082610bd8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b03166114325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161077b565b600061143d83610bd8565b9050806001600160a01b0316846001600160a01b0316148061148457506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114a85750836001600160a01b031661149d84610706565b6001600160a01b0316145b949350505050565b826001600160a01b03166114c382610bd8565b6001600160a01b0316146115275760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161077b565b6001600160a01b0382166115895760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161077b565b61159460008261134b565b6001600160a01b03831660009081526005602052604081208054600192906115bd9084906121fc565b90915550506001600160a01b03821660009081526005602052604081208054600192906115eb90849061219c565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6127106001600160601b038216111561170c5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161077b565b6001600160a01b0382166117625760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161077b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b610bd48282604051806020016040528060008152506119fb565b816001600160a01b0316836001600160a01b0316036118165760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161077b565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61188e8484846114b0565b61189a84848484611a2e565b6111435760405162461bcd60e51b815260040161077b90612213565b6060600b80546106839061207b565b6060816000036118ec5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119165780611900816121b4565b915061190f9050600a83612151565b91506118f0565b60008167ffffffffffffffff81111561193157611931611e68565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b5090505b84156114a8576119706001836121fc565b915061197d600a86612265565b61198890603061219c565b60f81b81838151811061199d5761199d612279565b60200101906001600160f81b031916908160001a9053506119bf600a86612151565b945061195f565b60006001600160e01b0319821663152a902d60e11b148061066e57506301ffc9a760e01b6001600160e01b031983161461066e565b611a058383611b2f565b611a126000848484611a2e565b6108b05760405162461bcd60e51b815260040161077b90612213565b60006001600160a01b0384163b15611b2457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a7290339089908890889060040161228f565b6020604051808303816000875af1925050508015611aad575060408051601f3d908101601f19168201909252611aaa918101906122cc565b60015b611b0a573d808015611adb576040519150601f19603f3d011682016040523d82523d6000602084013e611ae0565b606091505b508051600003611b025760405162461bcd60e51b815260040161077b90612213565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114a8565b506001949350505050565b6001600160a01b038216611b855760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161077b565b6000818152600460205260409020546001600160a01b031615611bea5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161077b565b6001600160a01b0382166000908152600560205260408120805460019290611c1390849061219c565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611c7d9061207b565b90600052602060002090601f016020900481019282611c9f5760008555611ce5565b82601f10611cb857805160ff1916838001178555611ce5565b82800160010185558215611ce5579182015b82811115611ce5578251825591602001919060010190611cca565b50611cf1929150611cf5565b5090565b5b80821115611cf15760008155600101611cf6565b6001600160e01b031981168114611d2057600080fd5b50565b600060208284031215611d3557600080fd5b813561121d81611d0a565b60005b83811015611d5b578181015183820152602001611d43565b838111156111435750506000910152565b60008151808452611d84816020860160208601611d40565b601f01601f19169290920160200192915050565b60208152600061121d6020830184611d6c565b600060208284031215611dbd57600080fd5b5035919050565b80356001600160a01b0381168114611ddb57600080fd5b919050565b60008060408385031215611df357600080fd5b611dfc83611dc4565b946020939093013593505050565b600080600060608486031215611e1f57600080fd5b611e2884611dc4565b9250611e3660208501611dc4565b9150604084013590509250925092565b60008060408385031215611e5957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e9957611e99611e68565b604051601f8501601f19908116603f01168101908282118183101715611ec157611ec1611e68565b81604052809350858152868686011115611eda57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611f0657600080fd5b813567ffffffffffffffff811115611f1d57600080fd5b8201601f81018413611f2e57600080fd5b6114a884823560208401611e7e565b600060208284031215611f4f57600080fd5b61121d82611dc4565b60008060408385031215611f6b57600080fd5b611f7483611dc4565b915060208301356001600160601b0381168114611f9057600080fd5b809150509250929050565b60008060408385031215611fae57600080fd5b611fb783611dc4565b915060208301358015158114611f9057600080fd5b60008060008060808587031215611fe257600080fd5b611feb85611dc4565b9350611ff960208601611dc4565b925060408501359150606085013567ffffffffffffffff81111561201c57600080fd5b8501601f8101871361202d57600080fd5b61203c87823560208401611e7e565b91505092959194509250565b6000806040838503121561205b57600080fd5b61206483611dc4565b915061207260208401611dc4565b90509250929050565b600181811c9082168061208f57607f821691505b6020821081036120af57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561213657612136612106565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121605761216061213b565b500490565b60208082526018908201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604082015260600190565b600082198211156121af576121af612106565b500190565b6000600182016121c6576121c6612106565b5060010190565b600083516121df818460208801611d40565b8351908301906121f3818360208801611d40565b01949350505050565b60008282101561220e5761220e612106565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826122745761227461213b565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122c290830184611d6c565b9695505050505050565b6000602082840312156122de57600080fd5b815161121d81611d0a56fea2646970667358221220d5162b4dbbfa4f9873c04a4c083319762f5698e18bbdf128589aed33b61142a764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063715018a6116100f7578063a85adeab11610095578063e456b01c11610064578063e456b01c14610592578063e6fd48bc146105c6578063e985e9c5146105fa578063f2fde38b1461064357600080fd5b8063a85adeab14610500578063b88d4fde14610534578063c87b56dd14610554578063e30c39781461057457600080fd5b80638da5cb5b116100d15780638da5cb5b1461049a57806392642744146104b857806395d89b41146104cb578063a22cb465146104e057600080fd5b8063715018a61461041c57806372cd1fa5146104315780637501f7411461045157600080fd5b80632a55205a1161016f57806355f804b31161013e57806355f804b3146103a75780636352211e146103c75780636c0360eb146103e757806370a08231146103fc57600080fd5b80632a55205a146103135780632e1a7d4d1461035257806342842e0e146103725780634e71e0c81461039257600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630d39fc811461028357806318160ddd146102cf57806323b872dd146102f357600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed366004611d23565b610663565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c610674565b6040516101fe9190611d98565b34801561023557600080fd5b50610249610244366004611dab565b610706565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004611de0565b6107a0565b005b34801561028f57600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b0390911681526020016101fe565b3480156102db57600080fd5b506102e5600a5481565b6040519081526020016101fe565b3480156102ff57600080fd5b5061028161030e366004611e0a565b6108b5565b34801561031f57600080fd5b5061033361032e366004611e46565b6108e6565b604080516001600160a01b0390931683526020830191909152016101fe565b34801561035e57600080fd5b5061028161036d366004611dab565b610992565b34801561037e57600080fd5b5061028161038d366004611e0a565b610aec565b34801561039e57600080fd5b50610281610b07565b3480156103b357600080fd5b506102816103c2366004611ef4565b610b88565b3480156103d357600080fd5b506102496103e2366004611dab565b610bd8565b3480156103f357600080fd5b5061021c610c4f565b34801561040857600080fd5b506102e5610417366004611f3d565b610cdd565b34801561042857600080fd5b50610281610d64565b34801561043d57600080fd5b5061028161044c366004611f58565b610da9565b34801561045d57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101fe565b3480156104a657600080fd5b506008546001600160a01b0316610249565b6102816104c6366004611dab565b610e39565b3480156104d757600080fd5b5061021c6110f7565b3480156104ec57600080fd5b506102816104fb366004611f9b565b611106565b34801561050c57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b34801561054057600080fd5b5061028161054f366004611fcc565b611111565b34801561056057600080fd5b5061021c61056f366004611dab565b611149565b34801561058057600080fd5b506009546001600160a01b0316610249565b34801561059e57600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b3480156105d257600080fd5b506104857f000000000000000000000000000000000000000000000000000000000000000081565b34801561060657600080fd5b506101f2610615366004612048565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561064f57600080fd5b5061028161065e366004611f3d565b611224565b600061066e8261130b565b92915050565b6060600280546106839061207b565b80601f01602080910402602001604051908101604052809291908181526020018280546106af9061207b565b80156106fc5780601f106106d1576101008083540402835291602001916106fc565b820191906000526020600020905b8154815290600101906020018083116106df57829003601f168201915b5050505050905090565b6000818152600460205260408120546001600160a01b03166107845760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006107ab82610bd8565b9050806001600160a01b0316836001600160a01b0316036108185760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161077b565b336001600160a01b038216148061083457506108348133610615565b6108a65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161077b565b6108b0838361134b565b505050565b6108bf33826113b9565b6108db5760405162461bcd60e51b815260040161077b906120b5565b6108b08383836114b0565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161095b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061097a906001600160601b03168761211c565b6109849190612151565b915196919550909350505050565b336109a56008546001600160a01b031690565b6001600160a01b0316146109cb5760405162461bcd60e51b815260040161077b90612165565b60008111610a1b5760405162461bcd60e51b815260206004820152601d60248201527f50544e46542f77697468647261772d616d6f756e742d67742d7a65726f000000604482015260640161077b565b604051600090339083908381818185875af1925050503d8060008114610a5d576040519150601f19603f3d011682016040523d82523d6000602084013e610a62565b606091505b5050905080610ab35760405162461bcd60e51b815260206004820152601c60248201527f50544e46542f6661696c65642d746f2d77697468647261772d65746800000000604482015260640161077b565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6108b083838360405180602001604052806000815250611111565b6009546001600160a01b03163314610b615760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e657200604482015260640161077b565b600954610b76906001600160a01b031661164c565b600980546001600160a01b0319169055565b33610b9b6008546001600160a01b031690565b6001600160a01b031614610bc15760405162461bcd60e51b815260040161077b90612165565b8051610bd490600b906020840190611c71565b5050565b6000818152600460205260408120546001600160a01b03168061066e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161077b565b600b8054610c5c9061207b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c889061207b565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b505050505081565b60006001600160a01b038216610d485760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161077b565b506001600160a01b031660009081526005602052604090205490565b33610d776008546001600160a01b031690565b6001600160a01b031614610d9d5760405162461bcd60e51b815260040161077b90612165565b610da7600061164c565b565b33610dbc6008546001600160a01b031690565b6001600160a01b031614610de25760405162461bcd60e51b815260040161077b90612165565b610dec828261169e565b6040516001600160601b03821681526001600160a01b0383169033907f66bada9bf591c1c0376ab893e5fd4262ee0200d6018fb65d4d627e145536417a9060200160405180910390a35050565b4263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168110801590610e9557507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681105b610ed75760405162461bcd60e51b815260206004820152601360248201527250544e46542f73616c652d696e61637469766560681b604482015260640161077b565b600a5463ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f0b848361219c565b1115610f4f5760405162461bcd60e51b815260206004820152601360248201527214151391950bdb999d1ccb5cdbdb190b5bdd5d606a1b604482015260640161077b565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16831115610fbe5760405162461bcd60e51b815260206004820152601660248201527514151391950bd95e18d959591ccb5b585e0b5b5a5b9d60521b604482015260640161077b565b6000610ff36001600160801b037f0000000000000000000000000000000000000000000000000000000000000000168561211c565b90503481146110445760405162461bcd60e51b815260206004820152601860248201527f50544e46542f696e73756666696369656e742d66756e64730000000000000000604482015260640161077b565b60005b848110156110a857600061105b828561219c565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681101561109557611095338261179b565b50806110a0816121b4565b915050611047565b506110b3848361219c565b600a55604080518581526020810183905233917f3a8a89b59a31c39a36febecb987e0657ab7b7c73b60ebacb44dcb9886c2d5c8a910160405180910390a250505050565b6060600380546106839061207b565b610bd43383836117b5565b61111b33836113b9565b6111375760405162461bcd60e51b815260040161077b906120b5565b61114384848484611883565b50505050565b6000818152600460205260409020546060906001600160a01b03166111c85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161077b565b60006111d26118b6565b905060008151116111f2576040518060200160405280600081525061121d565b806111fc846118c5565b60405160200161120d9291906121cd565b6040516020818303038152906040525b9392505050565b336112376008546001600160a01b031690565b6001600160a01b03161461125d5760405162461bcd60e51b815260040161077b90612165565b6001600160a01b0381166112c15760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d6164604482015264647265737360d81b606482015260840161077b565b600980546001600160a01b0319166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b60006001600160e01b031982166380ac58cd60e01b148061133c57506001600160e01b03198216635b5e139f60e01b145b8061066e575061066e826119c6565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061138082610bd8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600460205260408120546001600160a01b03166114325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161077b565b600061143d83610bd8565b9050806001600160a01b0316846001600160a01b0316148061148457506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114a85750836001600160a01b031661149d84610706565b6001600160a01b0316145b949350505050565b826001600160a01b03166114c382610bd8565b6001600160a01b0316146115275760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161077b565b6001600160a01b0382166115895760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161077b565b61159460008261134b565b6001600160a01b03831660009081526005602052604081208054600192906115bd9084906121fc565b90915550506001600160a01b03821660009081526005602052604081208054600192906115eb90849061219c565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6127106001600160601b038216111561170c5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161077b565b6001600160a01b0382166117625760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161077b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b610bd48282604051806020016040528060008152506119fb565b816001600160a01b0316836001600160a01b0316036118165760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161077b565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61188e8484846114b0565b61189a84848484611a2e565b6111435760405162461bcd60e51b815260040161077b90612213565b6060600b80546106839061207b565b6060816000036118ec5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119165780611900816121b4565b915061190f9050600a83612151565b91506118f0565b60008167ffffffffffffffff81111561193157611931611e68565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b5090505b84156114a8576119706001836121fc565b915061197d600a86612265565b61198890603061219c565b60f81b81838151811061199d5761199d612279565b60200101906001600160f81b031916908160001a9053506119bf600a86612151565b945061195f565b60006001600160e01b0319821663152a902d60e11b148061066e57506301ffc9a760e01b6001600160e01b031983161461066e565b611a058383611b2f565b611a126000848484611a2e565b6108b05760405162461bcd60e51b815260040161077b90612213565b60006001600160a01b0384163b15611b2457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a7290339089908890889060040161228f565b6020604051808303816000875af1925050508015611aad575060408051601f3d908101601f19168201909252611aaa918101906122cc565b60015b611b0a573d808015611adb576040519150601f19603f3d011682016040523d82523d6000602084013e611ae0565b606091505b508051600003611b025760405162461bcd60e51b815260040161077b90612213565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114a8565b506001949350505050565b6001600160a01b038216611b855760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161077b565b6000818152600460205260409020546001600160a01b031615611bea5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161077b565b6001600160a01b0382166000908152600560205260408120805460019290611c1390849061219c565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611c7d9061207b565b90600052602060002090601f016020900481019282611c9f5760008555611ce5565b82601f10611cb857805160ff1916838001178555611ce5565b82800160010185558215611ce5579182015b82811115611ce5578251825591602001919060010190611cca565b50611cf1929150611cf5565b5090565b5b80821115611cf15760008155600101611cf6565b6001600160e01b031981168114611d2057600080fd5b50565b600060208284031215611d3557600080fd5b813561121d81611d0a565b60005b83811015611d5b578181015183820152602001611d43565b838111156111435750506000910152565b60008151808452611d84816020860160208601611d40565b601f01601f19169290920160200192915050565b60208152600061121d6020830184611d6c565b600060208284031215611dbd57600080fd5b5035919050565b80356001600160a01b0381168114611ddb57600080fd5b919050565b60008060408385031215611df357600080fd5b611dfc83611dc4565b946020939093013593505050565b600080600060608486031215611e1f57600080fd5b611e2884611dc4565b9250611e3660208501611dc4565b9150604084013590509250925092565b60008060408385031215611e5957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e9957611e99611e68565b604051601f8501601f19908116603f01168101908282118183101715611ec157611ec1611e68565b81604052809350858152868686011115611eda57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611f0657600080fd5b813567ffffffffffffffff811115611f1d57600080fd5b8201601f81018413611f2e57600080fd5b6114a884823560208401611e7e565b600060208284031215611f4f57600080fd5b61121d82611dc4565b60008060408385031215611f6b57600080fd5b611f7483611dc4565b915060208301356001600160601b0381168114611f9057600080fd5b809150509250929050565b60008060408385031215611fae57600080fd5b611fb783611dc4565b915060208301358015158114611f9057600080fd5b60008060008060808587031215611fe257600080fd5b611feb85611dc4565b9350611ff960208601611dc4565b925060408501359150606085013567ffffffffffffffff81111561201c57600080fd5b8501601f8101871361202d57600080fd5b61203c87823560208401611e7e565b91505092959194509250565b6000806040838503121561205b57600080fd5b61206483611dc4565b915061207260208401611dc4565b90509250929050565b600181811c9082168061208f57607f821691505b6020821081036120af57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561213657612136612106565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121605761216061213b565b500490565b60208082526018908201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604082015260600190565b600082198211156121af576121af612106565b500190565b6000600182016121c6576121c6612106565b5060010190565b600083516121df818460208801611d40565b8351908301906121f3818360208801611d40565b01949350505050565b60008282101561220e5761220e612106565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826122745761227461213b565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122c290830184611d6c565b9695505050505050565b6000602082840312156122de57600080fd5b815161121d81611d0a56fea2646970667358221220d5162b4dbbfa4f9873c04a4c083319762f5698e18bbdf128589aed33b61142a764736f6c634300080d0033",
  "devdoc": {
    "events": {
      "NFTInitialized(string,string,uint128,uint32,uint32,uint32,uint32,address)": {
        "params": {
          "endTimestamp": "Timestamp at which the NFT sale ends",
          "maxMint": "Max number of NFTs that can be minted in a single transaction",
          "maxNFT": "Max number of NFTs available in this collection",
          "name": "Name of the NFT collection",
          "nftPrice": "NFT price in ETH",
          "owner": "Address of the contract owner",
          "startTimestamp": "Timestamp at which the NFT sale starts",
          "symbol": "Symbol of the NFT collection"
        }
      },
      "NFTMinted(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of ETH received",
          "numberOfTokens": "Number of NFTs minted",
          "to": "Address who received the minted NFTs"
        }
      },
      "RoyaltyFeeSet(address,address,uint96)": {
        "params": {
          "fee": "Fee expressed in basis points",
          "owner": "Address of the caller. Owner of this contract.",
          "recipient": "Address to whom the royalty fee will be paid"
        }
      },
      "Withdrawn(address,uint256)": {
        "params": {
          "amount": "Amount of ETH withdrawn",
          "owner": "Address of the caller and recipient. Owner of this contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "constructor": {
        "params": {
          "_endTimestamp": "Timestamp at which the NFT sale will end",
          "_maxMint": "Max number of NFTs that can be minted in a single transaction",
          "_maxNFT": "Max number of NFTs available in this collection",
          "_name": "NFT collection name",
          "_nftPrice": "NFT price in ETH",
          "_owner": "Owner of this contract",
          "_startTimestamp": "Timestamp at which the NFT sale will start",
          "_symbol": "NFT collection symbol"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintNFT(uint256)": {
        "params": {
          "_numberOfTokens": "Number of NFTs to mint"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "This function is only callable by the owner of the contract.",
        "params": {
          "baseURI_": "NFT tokens base URI"
        }
      },
      "setRoyaltyFee(address,uint96)": {
        "details": "Fees are expressed in basis points. For example: 1000 = 10%",
        "params": {
          "_fee": "Percentage of the secondary sales that will be paid to the `_recipient`",
          "_recipient": "Address to whom the royalty fee will be paid"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      },
      "withdraw(uint256)": {
        "details": "This function is only callable by the owner of the contract.",
        "params": {
          "_amount": "Amount of ETH to withdraw"
        }
      }
    },
    "title": "PoolTogether Inc. Pooly NFT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NFTInitialized(string,string,uint128,uint32,uint32,uint32,uint32,address)": {
        "notice": "Emitted when the NFT is initialized."
      },
      "NFTMinted(address,uint256,uint256)": {
        "notice": "Emitted when one or more NFTs are minted."
      },
      "RoyaltyFeeSet(address,address,uint96)": {
        "notice": "Emitted when royalty fee has been set."
      },
      "Withdrawn(address,uint256)": {
        "notice": "Emitted when ETH are withdrawn from the contract."
      }
    },
    "kind": "user",
    "methods": {
      "baseURI()": {
        "notice": "NFT tokens base URI"
      },
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "Initializes the NFT contract"
      },
      "endTimestamp()": {
        "notice": "Timestamp at which the NFTs will be unavailable for minting"
      },
      "maxMint()": {
        "notice": "Max number of NFTs that can be minted in a single transaction"
      },
      "maxNFT()": {
        "notice": "Max number of NFTs available in this collection"
      },
      "mintNFT(uint256)": {
        "notice": "Mints a new number of NFTs."
      },
      "nftPrice()": {
        "notice": "NFT price in ETH"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "setBaseURI(string)": {
        "notice": "Set NFT tokens base URI"
      },
      "setRoyaltyFee(address,uint96)": {
        "notice": "Sets the royalty fee that all ids in this contract will default to."
      },
      "startTimestamp()": {
        "notice": "Timestamp at which the NFTs will be available for minting"
      },
      "totalSupply()": {
        "notice": "Total supply of NFTs"
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw ETH from the contract."
      }
    },
    "notice": "NFT to help PoolTogether Inc. raise funds that will be used to cover cost of the legal fees.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1108,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1105_storage"
      },
      {
        "astId": 1113,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1105_storage)"
      },
      {
        "astId": 44,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 46,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 50,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 54,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 58,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 64,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1850,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1852,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2074,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/PoolyNFT.sol:PoolyNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1105_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1105_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1105_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1102,
            "contract": "contracts/PoolyNFT.sol:PoolyNFT",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1104,
            "contract": "contracts/PoolyNFT.sol:PoolyNFT",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}